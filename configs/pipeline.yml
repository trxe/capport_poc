pipeline:
  trial: # self-contained, in the future we may wanna stack pipelines
    - label: cs_player_ids
      node_type: SOURCE
      use: from_config
      args: 
        result: [{'id': 1}, {'id': 1}, {'id': 1}]
    - label: cs_player_ids_df
      node_type: TRANSFORM
      use: into_df
      take_from: 
        data: cs_player_ids

  # each pipeline item is a node
  # bulk_player_data:
  #   - label: cs_player_data
  #     node_type: source # sources and sinks are all services.
  #     use: mongo_csdb # looks for the mongo_csdb service
  #     args: 
  #       table: players
  #       req_type: match
  #       match: {} # match node

  #   - label: nhl_player_urls
  #     node_type: transform
  #     use: cs_player_ids_to_nhl_landing_urls
  #     take_from: [ cs_player_data ]

  #   - label: nhl_players
  #     node_type: source
  #     use: nhl_api # even this must be a "service"
  #     take_from: [ nhl_player_urls ]

  #   - label: cs_person
  #     node_type: transform
  #     use: nhl_player_to_person
  #     take_from: [ nhl_players ]

  #   - label: cs_player
  #     node_type: transform
  #     use: nhl_player_to_person
  #     take_from: [ nhl_players ]

  #   - label: cs_person_upsert
  #     node_type: sink
  #     use: postgres
  #     take_from: [ cs_person ]
  #     args: 
  #       table: Person
  #       req_type: insert
  #       model: person

  #   - label: cs_player_upsert
  #     node_type: sink
  #     use: postgres
  #     take_from: [ cs_player ]
  #     args: 
  #       table: Player
  #       req_type: insert
  #       model: player

  # get_game_data:
  #   - label: cs_player_data
  #     node_type: source # sources and sinks are all services.
  #     use: mongo_csdb # looks for the mongo_csdb service
  #     args: 
  #       table: players
  #       req_type: match
  #       match: {} # match node
